name: Nightly App Release

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  build_linux:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python 3.10
      uses: actions/setup-python@master
      with: { python-version: '3.10' }

    - name: Upgrade pip
      run: python -m pip install --upgrade pip pipenv

    - name: Install library
      run: pipenv sync

    - name: Build
      run: pipenv run pyinstaller ./src/main.py -F

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        name: release-linux
        path: dist/main

  # build_macintosh:
  #   runs-on: macOS-latest

  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v2

  #   - name: Set up Python 3.10
  #     uses: actions/setup-python@master
  #     with: { python-version: '3.10' }

  #   - name: Upgrade pip
  #     run: python -m pip install --upgrade pip pipenv

  #   - name: Install library
  #     run: pipenv sync

  #   - name: Build
  #     run: pipenv run pyinstaller ./src/main.py -F

  #   - name: Upload
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: release-mac
  #       path: dist/main

  build_windows:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python 3.10
      uses: actions/setup-python@master
      with: { python-version: '3.10' }

    - name: Upgrade pip
      run: python -m pip install --upgrade pip pipenv

    - name: Install library
      run: pipenv sync

    - name: Install additional library
      run: pipenv install pywin32-ctypes

    - name: Build
      run: pipenv run pyinstaller ./src/main.py -F

    - name: Upload
      uses: actions/upload-artifact@v1
      with:
        name: release-win
        path: dist/main.exe

  release:
    needs: [build_linux, build_windows]
    runs-on: ubuntu-latest

    steps:
    - name: Download Linux
      uses: actions/download-artifact@v1
      with:
        name: release-linux

    # - name: Download Mac
    #   uses: actions/download-artifact@v1
    #   with:
    #     name: release-mac

    - name: Download Windows
      uses: actions/download-artifact@v1
      with:
        name: release-win

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.sha }}
        release_name: VSML@${{ github.sha }}
        body: VSML v${{ github.sha }}
        draft: false
        prerelease: false

    - name: Zip
      run: |
        tar -C release-linux -pczvf release-linux.tar.gz main
        zip --junk-paths release-win ./release-win/main.exe

    - name: Append linux binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-linux.tar.gz
        asset_name: release-linux.tar.gz
        asset_content_type: application/gzip

    # - name: Append macintosh binary
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./release-mac.tar.gz
    #     asset_name: release-mac.tar.gz
    #     asset_content_type: application/gzip

    - name: Append windows binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-win.zip
        asset_name: release-win.zip
        asset_content_type: application/zip
